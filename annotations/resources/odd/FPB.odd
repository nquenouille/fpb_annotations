<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="teipublisher_odds.xsd"?><tei:TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:tei="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>FPB</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="fpb.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-07-10+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="FPB" source="teipublisher.odd"> 
                <elementSpec ident="hi" mode="change">
                    <model predicate="@rend=&#34;superscript&#34;" behaviour="inline">
            <outputRendition xml:space="preserve">
                vertical-align: super;
                font-size: 50%;
            </outputRendition>
        </model>
                    <model predicate="@rend=&#34;underline&#34;" behaviour="inline">
            <outputRendition xml:space="preserve">
            text-decoration: underline;
            </outputRendition>
        </model>
                    <model predicate="@rend='semibold'" behaviour="inline">
            <outputRendition xml:space="preserve">
            font-weight: 600;
            </outputRendition>
        </model>
                    <model predicate="@rend=&#34;latintype&#34; or @rend=&#34;italic&#34;" behaviour="inline" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            font-style:italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model predicate="sic and corr" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="sic[1]"/>
            <param name="alternate" value="concat('recte: ', corr[1])"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration:underline dotted;
            </outputRendition>
        </model>
<!--                    <model predicate="expan and abbr[@type='resolve'] and $parameters?mode='normalized'" behaviour="inline">-->
            <model predicate="expan and abbr[@type='resolve']" behaviour="inline">
            <param name="content" value="expan"/>
        </model>
        <model predicate="expan and (abbr[@type='perge'] or abbr[@type='mp']) and $parameters?mode='normalized'" behaviour="inline">
            <outputRendition xml:space="preserve">
                text-decoration:underline dotted;
            </outputRendition>
        </model>
        <model predicate="abbr and expan" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="abbr[1]"/>
            <param name="alternate" value="expan[1]"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration:underline dotted;
            </outputRendition>
        </model>
<!--                    <model predicate="orig and reg[@type='modern'] and $parameters?mode='normalized'" behaviour="inline">-->
            <model predicate="orig and reg[@type='modern']" behaviour="inline">
            <param name="content" value="reg"/>
        </model>
                    <model predicate="orig and reg" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration:underline dotted;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="dateline" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="date" mode="change">
                    <model output="web" predicate="@when" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value=" let $date-pattern := matches(@when, '^\d{4}-\d{2}-\d{2}$') 
                                            let $month-pattern := matches(@when, '^\d{4}-\d{2}$')
                                            let $month-day-pattern := matches(@when, '^--\d{2}-\d{2}$')
                                            let $year-only-pattern := matches(@when, '^\d{4}$')
                                            let $day-only-pattern := matches(@when, '^---\d{2}$') 
                                            let $month-only-pattern := matches(@when, '^--\d{2}$') 
                                            let $months := ('Januar', 'Februar', 'MÃ¤rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember') 
                                            return 
                                              if ($date-pattern) then 
                                                let $month := substring(@when, 6, 2) 
                                                let $month-index := xs:int($month) 
                                                let $day := substring(@when, 9, 2) 
                                                let $year := substring(@when, 1, 4) 
                                                return concat($day, '. ', $months[$month-index], ' ', $year) 
                                              else if ($month-pattern) then 
                                                let $month := substring(@when, 6, 2) 
                                                let $month-index := xs:int($month) 
                                                let $year := substring(@when, 1, 4) 
                                                return concat($months[$month-index], ' ', $year) 
                                              else if ($month-day-pattern) then
                                                let $month := substring(@when, 3, 2)
                                                let $month-index := xs:int($month)
                                                let $day := substring(@when, 6,2)
                                                return concat($day, '. ', $months[$month-index])
                                              else if ($day-only-pattern) then 
                                                let $day := substring(@when, 4, 2)
                                                return concat($day, '. Tag eines unbekannten Monats') 
                                              else if ($month-only-pattern) then 
                                                let $month := substring(@when, 3, 2) 
                                                let $month-index := xs:int($month)
                                                return $months[$month-index] 
                                              else if ($year-only-pattern) then 
                                                let $year := substring(@when, 1, 4)
                                                return $year
                                              else ()" />
            <param name="placement" value="'bottom'"/>
            <param name="fallback-placement" value="'right'"/>
            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            null
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <!-- For annotation tool only -->
                    <model behaviour="inline" predicate="@ref">
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="."/>
                        <param name="uri" value="concat('https://fpb.saw-leipzig.de/person/person/', replace(@ref, 'fpb-', ''))"/>
                        <param name="target" value="'_blank'"/>
                        <param name="alternate" value="concat(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(), ' (*', id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//birth/date/@when, ', â', id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//death/date/@when, ')')"/>
                        <param name="placement" value="'bottom'"/>
                        <param name="fallback-placement" value="'right'"/>
                        <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate"><a href="[[uri]]" target="[[target]]">[[alternate]]</a></span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                            text-decoration: underline dotted;
                        </outputRendition>
                    </model>
<!--                    <model output="web" predicate="@ref and $parameters?view='normalized'" behaviour="webcomponent">-->
<!--            <param name="content" value="."/>-->
<!--            <param name="name" value="'pb-highlight'"/>-->
<!--            <param name="duration" value="3000"/>-->
<!--            <param name="key" value="@ref"/>-->
<!--            <param name="highlight-self" value="'highlight-self'"/>-->
<!--        </model>-->
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <model output="web" predicate="@xml:id" behaviour="listItem">
            <param name="name" value="'pb-highlight'"/>
            <param name="highlight-self" value="'highlight-self'"/>
            <param name="duration" value="3000"/>
            <param name="key" value="@xml:id"/>
            <pb:template xmlns="" xml:space="preserve"><pb-highlight key="[[key]]" highlight-self="[[highlight-self]]" duration="[[duration]]">[[content]]</pb-highlight></pb:template>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="expan" mode="add"/>
                <elementSpec ident="place" mode="add">
                    <model behaviour="block">
            <param name="content" value="note/node()"/>
        </model>
                </elementSpec>
                <elementSpec ident="placeName" mode="add">
                    <model behaviour="inline" predicate="@ref">
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="."/>
                        <param name="uri" value="concat('https://fpb.saw-leipzig.de/places/place/', replace(@ref, 'fpb-', ''))"/>
                        <param name="target" value="'_blank'"/>
                        <param name="alternate" value="concat(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/placeName/text(), ' (N', substring-before(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//location/geo/text(), ' '),' E', substring-after(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//location/geo/text(), ' '), ')')"/>
                        <param name="placement" value="'bottom'"/>
                        <param name="fallback-placement" value="'right'"/>
                        <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate"><a href="[[uri]]" target="[[target]]">[[alternate]]</a></span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                            text-decoration: underline dotted;
                        </outputRendition>
                    </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="rs" mode="add">
                    <model behaviour="inline">
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="."/>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <param name="alternate" value="if(@type='person' and starts-with(@key, 'fpb-')) then id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(@type='place' and starts-with(@key, 'fpb-')) then id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/placeName/text() else if(@type='organization' and starts-with(@key, 'fpb-')) then id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/orgName/text() else ./@key"/>
                        <param name="placement" value="'right'"/>
                        <param name="fallback-placement" value="'left'"/>
                        <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                            text-decoration: underline dotted;
                        </outputRendition>
                    </model>
                </elementSpec>
                    <elementSpec ident="app" mode="add">
                    <model behaviour="alternate">
                    <param name="default" value="lem[1]/node()"/>
                    <param name="alternate" value="for $rdg at $p in ./rdg return concat($rdg/@wit/string() || ': ', $rdg/string() || '&#xA;&#xA;')"/>
            <param name="lem" value="lem[1]/node()"/>
            <param name="rdg" value="string-join(  for $rdg at $p in ./rdg return (      '&#34;rdg[' || $p || ']&#34;:&#34;' || $rdg/string() || '&#34;',         '&#34;wit[' || $p || ']&#34;:&#34;' || $rdg/@wit/string() || '&#34;'     ),     ',' )"/>
            <pb:template xmlns="" xml:space="preserve"><span class="annotation annotation-app" data-type="app" data-annotation="{{[[rdg]]}}">[[lem]]</span></pb:template>
            <outputRendition xml:space="preserve">
                    text-decoration: underline dotted;
            </outputRendition>
        </model>
                </elementSpec>
        <elementSpec ident="note" mode="change">
            <model predicate="@place='margin-left'" behaviour="inline">
                <param name="content" value="for $anchor in ..//anchor/@xml:id return root($parameters?root)//div//note[@type='marginalia'][@target=$anchor]/node()"/>
                <outputRendition xml:space="preserve">
                    display: block;
                    float: right;
                    margin-right: -15%;
                    width: 5em;
                    margin-bottom: 0;
                    margin-top: 0;
                    clear: right;
                    overflow: visible;
                    font-size: 70%;
                    text-align: right;
                    text-indent: 0%;
                </outputRendition>
            </model>
            <model predicate="@place='margin-right'" behaviour="inline">
                <param name="content" value="for $anchor in ..//anchor/@xml:id return root($parameters?root)//div//note[@type='marginalia'][@target=$anchor]/node()"/>
                <outputRendition xml:space="preserve">
                    display: block;
                    float: left;
                    margin-left: -15%;
                    width: 5em;
                    margin-bottom: 0;
                    margin-top: 0;
                    clear: left;
                    overflow: visible;
                    font-size: 70%;
                    text-align: left;
                    text-indent: 0%;
                </outputRendition>
            </model>
            <model predicate="type='commented' and child::anchor" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="for $anchor in child::anchor/@n return root($parameters?root)//div//note[@type='note'][@n=$anchor]/node()"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'left'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                        text-decoration: underline dotted;
                        </outputRendition>
                    </model>
                    <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                    <model predicate="@type='presentation'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('PrÃ¤sentationsvermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('PrÃ¤sentationsvermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(@subtype='person' and starts-with(@hand, 'fpb-')) then concat('PrÃ¤sentationsvermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('PrÃ¤sentationsvermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                <model predicate="@type='received'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('Empfangsvermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Empfangsvermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(@subtype='person' and starts-with(@hand, 'fpb-')) then concat('Empfangsvermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Empfangsvermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                <model predicate="@type='possessor'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('Besitzvermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Besitzvermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(@subtype='person' and starts-with(@hand, 'fpb-')) then concat('Besitzvermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Besitzvermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                <model predicate="@type='address'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('Adressvermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Adressvermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Adressvermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Adressvermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                <model predicate="@type='numbering'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('Numerierungsvermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Numerierungsvermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Numerierungsvermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Numerierungsvermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                <model predicate="@type='postalNote'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('Postvermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Postvermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Postvermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Postvermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                <model predicate="@type='other'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="if(contains(@hand, 'main')) then concat('Sonstiger Vermerk, ergÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Sonstiger Vermerk, ergÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Sonstiger Vermerk, ergÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Sonstiger Vermerk, ergÃ¤nzt von: ', ./@hand)"/>
                    <param name="placement" value="'left'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    
                                    color: grey;
                                    text-decoration: underline dotted;
                                
                    </outputRendition>
                </model>
                    <model predicate="parent::person" behaviour="omit"/>
                    <model predicate="parent::num" behaviour="omit"/>
                    <model predicate="parent::span" behaviour="omit"/>
                    <model predicate="$parameters?view='notes' and not(parent::unclear)" behaviour="listItem">
            <param name="n" value="@n"/>
        </model>
<!--                    <model predicate="not(parent::unclear)" behaviour="note">-->
<!--            <param name="place" value="'footnote'"/>-->
<!--            <outputRendition xml:space="preserve">-->
<!--                font-size: 75%;-->
<!--                background-color: #C0C0C0;-->
<!--                padding: 0 .25em;-->
<!--                border-right: 1px solid black;-->
<!--                text-indent: 0;-->
<!--                margin: 0 .25em;-->
<!--            </outputRendition>-->
<!--        </model>-->
                    <model predicate="$parameters?view='notes' and not(parent::unclear)" behaviour="listItem">
            <param name="n" value="@n"/>
        </model>
<!--                    <model predicate="not(parent::unclear) and not(@type='presentation') and not(@type='received') and not(@type='address')" behaviour="note">-->
<!--            <param name="place" value="'footnote'"/>-->
<!--            <outputRendition xml:space="preserve">-->
<!--                font-size: 75%;-->
<!--                background-color: #C0C0C0;-->
<!--                padding: 0 .25em;-->
<!--                border-right: 1px solid black;-->
<!--                text-indent: 0;-->
<!--                margin: 0 .25em;-->
<!--            </outputRendition>-->
<!--        </model>-->
                    <model predicate="not(parent::unclear)" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model output="latex" behaviour="block">
            <param name="content" value=".//fileDesc//sourceDesc"/>
        </model>
                    <modelSequence output="fo">
            <model behaviour="heading">
                <param name="content" value="fileDesc/titleStmt/title"/>
                <param name="level" value="1"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Metadata'"/>
                <param name="level" value="2"/>
            </model>
            <model behaviour="block">
                <param name="content" value=".//sourceDesc//msDesc"/>
            </model>
        </modelSequence>
                    <model predicate="$parameters?view='metadata'" behaviour="block" cssClass="metadata">
            <param name="content" value=".//fileDesc//sourceDesc | .//fileDesc//publicationStmt |.//profileDesc//correspDesc"/>
            <outputRendition xml:space="preserve">
            font-size: .75em;
            </outputRendition>
        </model>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="fo" behaviour="omit"/>
                    <model predicate="$parameters?header='letter'" behaviour="inline">
            <param name="content" value="./fileDesc/titleStmt/title"/>
            <param name="level" value="5"/>
        </model>
        </elementSpec>
        <elementSpec ident="seg" mode="change">
            <model predicate="@rend='indent'" behaviour="inline">
            <param name="content" value="concat('     ', .)"/>
            <outputRendition xml:space="preserve" scope="before">
                content: '    ';
                white-space: pre;
            </outputRendition>
        </model>
        <model predicate="@type='keepLB' and $parameters?mode='normalized'" behaviour="break">
            <param name="type" value="'line'"/>
        </model>
                   <model behaviour="inline" useSourceRendition="true"/>
                </elementSpec>
                <elementSpec ident="anchor" mode="change">
                <modelSequence>
                <model predicate="contains(@xml:id, 'm') and following::note[@place='margin-left']" behaviour="inline">
                    <param name="content" value="for $anchor in ./@xml:id return root($parameters?root)//div//note[@type='marginalia'][@place='margin-left'][@target=$anchor]/node()"/>
                    <outputRendition xml:space="preserve">
            
            
            
            
                display: block;
                float: left;
                margin-left: -15%;
                width: 5em;
                margin-bottom: 0;
                margin-top: 0;
                clear: right;
                overflow: visible;
                font-size: 70%;
                text-align: left;
                text-indent: 0%;
            
            
            
            
            </outputRendition>
                </model>
                
            <model predicate="contains(@xml:id, 'm') and following::note[@place='margin-right']" behaviour="inline">
                    <param name="content" value="for $anchor in ./@xml:id return root($parameters?root)//div//note[@type='marginalia'][@place='margin-right'][@target=$anchor]/node()"/>
                    <outputRendition xml:space="preserve">
            
            
            
            
                display: block;
                float: right;
                margin-right: -15%;
                width: 5em;
                margin-bottom: 0;
                margin-top: 0;
                clear: left;
                overflow: visible;
                font-size: 70%;
                text-align: right;
                text-indent: 0%;
            
            
            
            
            </outputRendition>
                </model>
           
            <!-- add[addition] with Involved Scribe, differ between del tag in add and normal add -->
        <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='addition']/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='addition'][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='addition']/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))[@type='addition']/del[1]) then concat('ErgÃ¤nzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add[@type='addition']/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition'and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' UrsprÃ¼ngliche Lesart: ', id(concat('t', @xml:id), root($parameters?root))/string()) else concat('ErgÃ¤nzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add[@type='addition']/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        <!-- add[addition] with Main Scribe, differ between del tag in add and normal add -->
                    <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='addition'][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='addition']/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))/del[1]) then concat('ErgÃ¤nzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition'and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' UrsprÃ¼ngliche Lesart: ', id(concat('t', @xml:id), root($parameters?root))/string()) else concat('ErgÃ¤nzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        
         <!-- add[correction] with Involved Scribe  and unclear[unsure] del -->
        <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)) and preceding-sibling::del[1]/unclear[@reason='unsure']" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="preceding-sibling::del[1]/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' zu: ', id(concat('t', @xml:id), root($parameters?root))/string(), ' (unsicher)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        <!-- add[correction] with Main Scribe and unclear[unsure] del -->
                    <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id) and preceding-sibling::del[1]/unclear[@reason='unsure']" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='correction']/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' UrsprÃ¼ngliche Lesart: ', preceding-sibling::del[1], ' (unsicher)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        
        <!-- add[correction] with Involved Scribe  and unclear[illegible] del -->
        <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)) and preceding-sibling::del[1]/unclear[@reason='illegible']" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="preceding-sibling::del[1]/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' zu: ', id(concat('t', @xml:id), root($parameters?root))/string(), ' (unleserlich)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        <!-- add[correction] with Main Scribe and unclear[illegible] del -->
                    <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id) and preceding-sibling::del[1]/unclear[@reason='illegible']" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='correction']/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' UrsprÃ¼ngliche Lesart: ', preceding-sibling::del[1], ' (unleserlich)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        
        <!-- add[correction] with Involved Scribe -->
        <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)) and not(preceding-sibling::del[1]/unclear[@reason='unsure' or 'illegible'])" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="preceding-sibling::del[1]/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' zu: ', id(concat('t', @xml:id), root($parameters?root))/string()) else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        <!-- add[correction] with Main Scribe, differ between del tag in add and normal add -->
                    <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id) and not(preceding-sibling::del[1]/unclear[@reason='unsure' or 'illegible'])" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='correction']/node()"/>
            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' UrsprÃ¼ngliche Lesart: ', preceding-sibling::del[1]) else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
             </modelSequence>
                </elementSpec>
                <elementSpec ident="term" mode="add">
                    <model predicate="@type='term'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                    <param name="alternate" value="if(@type='term') then let $s := id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/def/string() return  concat(id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/orth/term/string(), ': ', $s) else ()"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gap" mode="change">
                    <model behaviour="inline">
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="'[ ]'"/>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <param name="alternate" value="concat('Textverlust durch ', @reason)"/>
                        <param name="placement" value="'top'"/>
                        <param name="fallback-placement" value="'bottom'"/>
                        <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
        </model>
                    <model predicate="desc" behaviour="inline">
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
                    <model behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content: '[...]';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                 <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                    <model output="print" predicate="ancestor::note" behaviour="inline"/>
                    <model behaviour="paragraph" useSourceRendition="true">
            <outputRendition xml:space="preserve">
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model predicate="@n='N001' and (ancestor::ab[@rend='textblock'][1] or ancestor::ab[@rend='tb cbr-li'][1] or ancestor::ab[@rend='tb cbr-lo'][1] or ancestor::ab[@rend='tb cbr-ri'][1] or ancestor::ab[@rend='tb cbr-ro'][1] or ancestor::ab[@rend='tb cbr-ti'][1] or ancestor::ab[@rend='tb cbr-to'][1] or ancestor::ab[@rend='tb cbr-bi'][1] or ancestor::ab[@rend='tb cbr-bo'][1])" behaviour="omit"/>
                    <model predicate="parent::ab[@rend='container'][1] and not(@n='N001')" behaviour="break"/>
                    <model predicate="following-sibling::*[1][self::add[contains(@xml:id, 'ta')]]" behaviour="omit"/>
                    <model predicate="$parameters?mode='normalized' and not(ancestor::closer) and not(ancestor::opener) and not(ancestor::address) and not(following-sibling::seg[@type='keepLB'][1]) and not(ancestor::head) and not(ancestor::signed)" behaviour="omit"/>
                    <modelSequence>
            <model predicate="not($parameters?mode='normalized')" behaviour="break">
                <param name="type" value="'line'"/>
                <param name="label" value="@n"/>
            </model>
            <model predicate="not($parameters?mode='normalized')" behaviour="break">
                <param name="type" value="'line'"/>
                <param name="label" value="@n"/>
            </model>
<!--            <model predicate="not($parameters?mode='normalized') and starts-with(@facs, 'iiif:')" behaviour="webcomponent" cssClass="facs">-->
<!--                <param name="facs" value="replace(replace(@facs, '/[^/]*$', ''), 'iiif:', '')"/>-->
<!--                <param name="content" value="'ï'"/>-->
<!--                <param name="coordinates" value="('[' || replace(@facs, '^.*/', '') || ']')"/>-->
<!--                <param name="emit" value="'transcription'"/>-->
<!--                <param name="name" value="'pb-facs-link'"/>-->
<!--                <outputRendition xml:space="preserve">-->
<!--                -->
<!--                -->
<!--                -->
<!--                                font-size: 12px;-->
<!--                                color: #888888;-->
<!--                                cursor: pointer;-->
<!--                                display: inline;-->
<!--                                display: block;-->
<!--                                margin-right: 30px;-->
<!--                                float: left;-->
<!--                            -->
<!--                -->
<!--                -->
<!--                </outputRendition>-->
<!--            </model>-->
        </modelSequence>
                </elementSpec>
                <elementSpec ident="l" mode="change"/>
                <elementSpec ident="supplied" mode="change">
                    <model predicate="parent::choice" behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="add" mode="change">
                    <model predicate="contains(@xml:id, 'ta')" behaviour="omit"/>
                    <model predicate="@type='correction' and preceding-sibling::del[1]" behaviour="omit"/>
                    
                <!-- Involved Scribe -->
                    <model predicate="not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) and @type='addition' and not(contains(@xml:id, 'ta'))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="if(starts-with(@hand, 'fpb-') and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)) then concat('ErgÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else if(not(@hand='')) then concat('ErgÃ¤nzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else 'ErgÃ¤nzung'"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        
        <!-- Main Scribe -->
                    <model predicate="(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) and @type='addition' and not(contains(@xml:id, 'ta'))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="if(starts-with(@hand, 'fpb-') and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) then concat('ErgÃ¤nzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else if(not(@hand='')) then concat('ErgÃ¤nzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else 'ErgÃ¤nzung'"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model predicate="@type='addition' and not(contains(@xml:id, 'ta'))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="concat('ErgÃ¤nzt von: ', @hand)"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="salute" mode="change">
                    <model predicate="parent::closer" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
        <elementSpec ident="ref" mode="change">
            <model predicate="@target" behaviour="link">
                <param name="uri" value="@target"/>
                <param name="alternate" value="@target"/>
                <param name="name" value="'pb-popover'"/>
                <pb:template xmlns="" xml:space="preserve"><pb-popover uri="[[uri]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                <outputRendition xml:space="preserve">
                    color: red;
                </outputRendition>
            </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="front" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="back" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="div" mode="change">
                    <model predicate="@type='commentary' or @type='commentary_front' or @type='commentary_back'" behaviour="omit"/>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="$parameters?view='notes'" behaviour="list">
            <param name="content" value="for $anchor in .//anchor/@n return  root($parameters?root)//div[@type='commentary']//note[@n=$anchor]"/>
            <model predicate="$parameters?mode='omitCommentary' and (@type='commentary' or @type='commentary_front' or @type='commentary_back')" behaviour="omit"/>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
            <param name="type" value="'custom'"/>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                <!-- If the hyphenated words are wrapped with <w> tags, the words are shown normally in normalized view without a gap -->
                 <elementSpec ident="w" mode="change">
                      <model predicate="$parameters?mode='normalized'" behaviour="inline">
                      <param name="content" value="(node() except (lb, span[@type='hyphen']))/normalize-space()[.] => string-join()"/>
                      </model>
                </elementSpec>
                <elementSpec ident="span" mode="add">
<!--                    <model predicate="$parameters?mode='normalized' and @type='hyphen'" behaviour="omit"/>-->
                    <model predicate="child::note" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                    <param name="alternate" value="note/node()"/>
                    <param name="placement" value="'right'"/>
                    <param name="fallback-placement" value="'left'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model predicate="@type='empty'" behaviour="inline">
            <param name="content" value="concat('&lt;Leerseite ', @n,'&gt;')"/>
            <outputRendition xml:space="preserve">
            display: block; color: grey; text-align: right; font-size: 75%;
            </outputRendition>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="content" value="'[' || @f || ':' || @n || ']'"/>
            <pb:template xmlns="" xml:space="preserve">\marginpar{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <param name="content" value="'[' || @f || ':' || @n || ']'"/>
        </model>
                    <model predicate="not(@type='hidden')" behaviour="webcomponent" useSourceRendition="true">
            <param name="content" value="@n"/>
            <param name="facs" value="let $path := id(substring-after(@facs, '#'), root($parameters?root)) return  $path/surface/graphic/@url"/>
            <param name="name" value="'pb-facs-link'"/>
            <param name="emit" value="'transcription'"/>
            <param name="order" value="@n"/>
            <outputRendition xml:space="preserve">
            display: block; color: grey; text-align: right; font-size: 75%;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: ' |p.';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '| '
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="msDesc" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="'Aufbewahrungsort:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="(//msIdentifier//repository)[1]/node()"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Inventarnr.:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//msIdentifier//idno[@type='id']/node()"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Inhalt:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//msContents//summary//desc/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="publicationStmt" mode="change">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="'Lizenz: '"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//publisher/node()"/>
            </model>
            <model behaviour="link" cssClass="link">
                <param name="link" value="//availability//licence/@target"/>
                <param name="target" value="'_blank'"/>
                <param name="content" value="//availability//licence/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="correspDesc" mode="add"/>
                <elementSpec ident="correspAction" mode="add">
                    <modelSequence>
            <model predicate="@type='sent'" behaviour="heading">
                <param name="content" value="'Absender: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='sent'" behaviour="block">
                <param name="content" value="if((count(persName) &gt; 1) and (persName[position() != last()])) then (for $pers in persName/node() return concat($pers,',&amp;#xa;')) else persName/node()"/>
            </model>
            <model predicate="@type='received'" behaviour="heading">
                <param name="content" value="'EmpfÃ¤nger: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='received'" behaviour="block">
                <param name="content" value="if((count(persName) &gt; 1) and (persName[position() != last()])) then (for $pers in persName/node() return concat($pers,',&amp;#xa;')) else persName/node()"/>
            </model>
            <model predicate="@type='sent'" behaviour="heading">
                <param name="content" value="'Abfassungsort und -datum: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='sent'" behaviour="block">
                <param name="content" value="concat(placeName/node(), ', ', date/node())"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="signed" mode="change">
                    <model predicate="parent::closer" behaviour="inline" />
                </elementSpec>
                <elementSpec ident="del" mode="change">
         <!-- Involved Scribe and and direct add[correction] and del with child::unclear[@reason='unsure'] -->
                    <model predicate="child::unclear[@reason='unsure'] and following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value=" 'â©â¦âª'"/>
            <param name="alternate" value="let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]) then (if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand and starts-with(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand, 'fpb-')) then concat('Korrigiert von: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(), ' zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/string(), ', ursprÃ¼ngliche Lesart unsicher') else if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand and not(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand = '')) then concat('Korrigiert von: ', replace(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand, 'involved', 'Unbekannter Schreiber '), ' zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/string(), ', ursprÃ¼ngliche Lesart unsicher') else concat('Korrigiert zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/text(), 'UrpsrÃ¼ngliche Lesart unsicher')) else ('Korrigiert, urprÃ¼ngliche Lesart unsicher'))"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        <!-- Main Scribe and direct add[correction] and del with child::unclear[@reason='unsure'] -->
                    <model predicate="child::unclear[@reason='unsure'] and following-sibling::add[1][@type='correction' and @place='inspace' and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value=" let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/node() else ()) "/>
            <param name="alternate" value="let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then concat('Korrigiert von: ', following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(),'; UrsprÃ¼ngliche Lesart: unsicher') else 'UrsprÃ¼ngliche Lesart: unsicher') else ())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- Involved Scribe and and direct add[correction] and del with child::unclear -->
                    <model predicate="child::unclear[not(@reason='unsure')] and following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value=" 'â©â¦âª'"/>
            <param name="alternate" value="let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]) then (if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand and starts-with(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand, 'fpb-')) then concat('Korrigiert von: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(), ' zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/string(), ', urpsÃ¼rngliche Lesart unleserlich') else if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand and not(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand = '')) then concat('Korrigiert von: ', replace(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand, 'involved', 'Unbekannter Schreiber '), ' zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/string(), ', ursprÃ¼ngliche Lesart unleserlich') else concat('Korrigiert zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/text(), 'UrpsrÃ¼ngliche Lesart unleserlich')) else ('Korrigiert, urprÃ¼ngliche Lesart unleserlich'))"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        <!-- Main Scribe and direct add[correction] and del with child::unclear -->
                    <model predicate="child::unclear[not(@reason='unsure')] and following-sibling::add[1][@type='correction' and @place='inspace' and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value=" let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/node() else ()) "/>
            <param name="alternate" value="let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then concat('Korrigiert von: ', following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(),'; UrsprÃ¼ngliche Lesart: unleserlich') else 'UrsprÃ¼ngliche Lesart: unleserlich') else ())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
       
        
            <!-- omit if there is an anchor -->
            <model predicate="following-sibling::anchor[1][concat('t', @xml:id) = root($parameters?root)//add[@type='correction']/@xml:id]" behaviour="omit"/>
        
        <!-- Involved Scribe and direct add[correction] -->
                    <model predicate="following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]) then (if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand and starts-with(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand, 'fpb-')) then concat('Korrigiert von: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(), ' zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/string()) else if(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand and not(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand = '')) then concat('Korrigiert von: ', replace(following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/@hand, 'involved', 'Unbekannter Schreiber '), ' zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/string()) else concat('Korrigiert zu: ', following-sibling::add[1][@type='correction' and @place='inspace' and not(@hand = $refPers)]/text())) else ('Korrigiert'))"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- Main Scribe and direct add[correction] -->
                    <model predicate="following-sibling::add[1][@type='correction' and @place='inspace' and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value=" let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]) then following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/node() else ()) "/>
            <param name="alternate" value="let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef return                      (if(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/@hand and starts-with(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/@hand, 'fpb-')) then concat('Korrigiert von: ', following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(),'; UrsprÃ¼ngliche Lesart: ', .) else if (following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/@hand and contains(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/@hand, 'main')) then (concat('Korrigiert von: ', replace(following-sibling::add[1][@type='correction' and @place='inspace' and @hand = $refPers]/@hand, 'main', 'Unbekannter Hauptschreiber '),'; UrsprÃ¼ngliche Lesart: ', .)) else concat('UrsprÃ¼ngliche Lesart: ', .))"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        
        <!-- parent add with anchor -> omit -->
                    <model predicate="parent::add[1] and parent::add[1]/following::anchor" behaviour="omit"/>
        <!-- del of Main Scribe without correction -->
                    <model predicate="not(following-sibling::add[1][@type='correction']) and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="'â©â¦âª'"/>
            <param name="alternate" value="if(contains(child::span/text(), '-')) then concat('UrsprÃ¼ngliche Lesart: ', replace(., '-', '')) else concat('UrsprÃ¼ngliche Lesart: ', .)"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
        <!-- del of Involved Scribe without correciton -->
                    <model predicate="not(following-sibling::add[1][@type='correction']) and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="concat('Gestrichen von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text())"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
<!--                    <model behaviour="inline">-->
<!--            <outputRendition xml:space="preserve">-->
<!--            text-decoration: line-through;-->
<!--            </outputRendition>-->
<!--        </model>-->
                </elementSpec>
                <elementSpec ident="birth" mode="add">
                    <model predicate="@when" behaviour="inline">
            <param name="content" value="if(following-sibling::death[1])then concat('(*', substring(@when, 0, 5), ', ') else concat('(*', substring(@when, 0, 5), ')')"/>
            <outputRendition xml:space="preserve">
            font-size: 80%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="occupation" mode="add">
                    <model predicate="parent::person" behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model predicate="@when" behaviour="inline">
            <param name="content" value="if(preceding-sibling::birth[1])then concat('â', substring(@when, 0, 5), ')') else concat('(â', substring(@when, 0, 5), ')')"/>
            <outputRendition xml:space="preserve">
            font-size: 80%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="closer" mode="change">
                    <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="preceding::note[@place='margin-right'] and preceding::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="preceding::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="preceding::note[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="floatingText" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            
                margin-left: 10em;
                margin-right: 10em;
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="facsimile" mode="add"/>
                <elementSpec ident="surface" mode="add">
                    <model output="print" behaviour="omit"/>
                </elementSpec>
            <elementSpec ident="opener" mode="change">
                <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="address" mode="add">
                    <model predicate="not(ancestor::closer) and following::note[@place='margin-right'] and following::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="not(ancestor::closer) and following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="not(ancestor::closer) and following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="unclear" mode="change">
                    <model predicate="not(@reason='illegible')" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="if (child::note[@type='commentary']) then replace(., child::note/text(), '') else ."/>
                    <param name="alternate" value="if (child::note[@type='commentary']) then note/text() else 'Lesart unsicher.'"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model predicate="@reason='illegible'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="' â©â¦âª '"/>
                    <param name="alternate" value="if (child::note[@type='commentary']) then note/text() else 'Unleserlich.'"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="emph" mode="change">
                    <model behaviour="inline" cssClass="annotation annotation-emphasize">
            <outputRendition xml:space="preserve">
            letter-spacing: 3px;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model>
                    <model predicate="following::note[@place='margin-right'] and following::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
       <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="num" mode="add">
                    <model predicate="child::note" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="note/node()"/>
                    <param name="placement" value="'right'"/>
                    <param name="fallback-placement" value="'left'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted; display: flex;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="metamark" mode="add">
                    <model behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="'......'"/>
                    <param name="alternate" value="'Fehlstelle'"/>
                    <param name="placement" value="'top'"/>
                    <param name="fallback-placement" value="'bottom'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: transparent;
            </outputRendition>
            <outputRendition xml:space="preserve">
                text-decoration:underline dotted;
                text-decoration-color: black;
           </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gloss" mode="add">
                    <model predicate="@type='margin-right'" behaviour="inline">
            <outputRendition xml:space="preserve">
                display: block;
                float: right;
                margin-right: -15%;
                width: 5em;
                margin-bottom: 0;
                margin-top: 0;
                clear: right;
                overflow: visible;
                font-size: 70%;
                text-align: right;
                text-indent: 0%;
            </outputRendition>
        </model>
        <model predicate="@type='margin-left'" behaviour="inline">
            <outputRendition xml:space="preserve">
                display: block;
                float: left;
                margin-left: -20%;
                width: 5em;
                margin-bottom: 0;
                margin-top: 0;
                clear: left;
                overflow: visible;
                font-size: 70%;
                text-align: left;
                text-indent: 0%;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="ab" mode="change">
            <model predicate="@type='hidden'" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="'Non-edited text / Nicht edierter Text'"/>
            <outputRendition xml:space="preserve">
            
            text-decoration: underline dotted;
            color: transparent;
            
            </outputRendition>
        </model>
         <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="table" mode="change">
                <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="table">
                    <outputRendition xml:space="preserve">
                        font-size: smaller;
                        margin-left: 15%;
                        margin-right: 15%;
                    </outputRendition>
                </model>
                <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="table">
                    <outputRendition xml:space="preserve">
                        margin-right: 15%;
                        font-size: smaller;
                    </outputRendition>
                </model>
                <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="table">
                    <outputRendition xml:space="preserve">
                        margin-left: 15%;
                        font-size: smaller;
                    </outputRendition>
                </model>
                <model behaviour="table">
                    <outputRendition xml:space="preserve">
                    font-size: smaller;
                    </outputRendition>
                </model>
            </elementSpec>
            </schemaSpec>
        </body>
    </text>
</tei:TEI>