<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="teipublisher_odds.xsd"?><tei:TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xmlns:tei="http://www.tei-c.org/ns/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>FPB</title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="fpb.css"/>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2023-07-10+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="FPB" source="teipublisher.odd"> 
                <elementSpec ident="hi" mode="change">
                <model predicate="@rend=&#34;superscript&#34;" behaviour="inline">
                    <desc>For @rend='superscript' display the text in superscript.</desc>
                    <outputRendition xml:space="preserve">
                        vertical-align: super;
                        font-size: 50%;
                    </outputRendition>
                </model>
                <model predicate="@rend=&#34;underline&#34;" behaviour="inline">
                    <desc>For @rend='underline' display the text with an underline.</desc>
                    <outputRendition xml:space="preserve">
                    text-decoration: underline;
                    </outputRendition>
                </model>
                <model predicate="@rend='semibold'" behaviour="inline">
                    <desc>For @rend='semibold' display the text, if possible in semi-bold, otherwise in bold.</desc>
                    <outputRendition xml:space="preserve">
                    font-weight: 600;
                    </outputRendition>
                </model>
                <model predicate="@rend=&#34;latintype&#34; or @rend=&#34;italic&#34;" behaviour="inline" useSourceRendition="true">
                    <desc>For @rend='latintype' or @rend='italic' put the text, which in original is written in Latinscript, in italics.</desc>
                    <outputRendition xml:space="preserve">
                    font-style:italic;
                    </outputRendition>
                </model>
            </elementSpec>
            <elementSpec ident="choice" mode="change">
                <model predicate="sic and corr" behaviour="inline">
                    <desc>In the case of an unusual spelling or similar, the correct spelling is displayed by a mouseover. The word in question is marked with a dotted line.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="sic[1]"/>
                    <param name="alternate" value="concat('recte: ', corr[1])"/>
                    <param name="placement" value="'top'"/>
                    <param name="fallback-placement" value="'bottom'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration:underline dotted;
                    </outputRendition>
                </model>
                <model predicate="expan and abbr[@type='resolve'] and $parameters?mode='normalized'" behaviour="inline">
                    <desc>Not in use. The original intention was to use abbreviations in the text version and to dissolve them in the reading version. The attribute rend=‘resolve’ would have been responsible for this.</desc>
                    <param name="alternate" value="abbr[1]"/>
                    <param name="content" value="expan[1]"/>
                    <param name="placement" value="'right'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration:underline dotted;
                    </outputRendition>
                </model>        
                <model predicate="abbr and expan" behaviour="inline">
                    <desc>Normal use of abbreviation and expansion: The text will preserve the abbreviation, and the mouse-over shows the expansion. The word in question is marked with a dotted line.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="abbr[1]"/>
                    <param name="alternate" value="expan[1]"/>
                    <param name="placement" value="'top'"/>
                    <param name="fallback-placement" value="'bottom'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration:underline dotted;
                    </outputRendition>
                </model>
                <model predicate="orig and reg" behaviour="inline">
                    <desc>Not in use.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="reg[1]"/>
                    <param name="alternate" value="orig[1]"/>
                    <param name="placement" value="'top'"/>
                    <param name="fallback-placement" value="'bottom'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration:underline dotted;
                    </outputRendition>
                </model>
            </elementSpec>
            <elementSpec ident="dateline" mode="change">
                <model behaviour="block">
                    <desc>Datelines will be rendered as block.</desc>
                </model>
            </elementSpec>
            <elementSpec ident="date" mode="change">
                <model output="web" predicate="@when" behaviour="inline">
                    <desc>Mouseover for specific dates with attribute @when. Case distinction for complete information (YYYY-MM-DD) and partial information (YYYY; YYYY-MM; YYYY-DD; MM; MM-DD; DD) and month mapping.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value=" let $date-pattern := matches(@when, '^\d{4}-\d{2}-\d{2}$') 
                                                    let $month-pattern := matches(@when, '^\d{4}-\d{2}$')
                                                    let $month-day-pattern := matches(@when, '^--\d{2}-\d{2}$')
                                                    let $year-only-pattern := matches(@when, '^\d{4}$')
                                                    let $day-only-pattern := matches(@when, '^---\d{2}$') 
                                                    let $month-only-pattern := matches(@when, '^--\d{2}$') 
                                                    let $months := ('Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember') 
                                                    return 
                                                    if ($date-pattern) then 
                                                        let $month := substring(@when, 6, 2) 
                                                        let $month-index := xs:int($month) 
                                                        let $day := substring(@when, 9, 2) 
                                                        let $year := substring(@when, 1, 4) 
                                                        return concat($day, '. ', $months[$month-index], ' ', $year) 
                                                    else if ($month-pattern) then 
                                                        let $month := substring(@when, 6, 2) 
                                                        let $month-index := xs:int($month) 
                                                        let $year := substring(@when, 1, 4) 
                                                        return concat($months[$month-index], ' ', $year) 
                                                    else if ($month-day-pattern) then
                                                        let $month := substring(@when, 3, 2)
                                                        let $month-index := xs:int($month)
                                                        let $day := substring(@when, 6,2)
                                                        return concat($day, '. ', $months[$month-index])
                                                    else if ($day-only-pattern) then 
                                                        let $day := substring(@when, 4, 2)
                                                        return concat($day, '. Tag eines unbekannten Monats') 
                                                    else if ($month-only-pattern) then 
                                                        let $month := substring(@when, 3, 2) 
                                                        let $month-index := xs:int($month)
                                                        return $months[$month-index] 
                                                    else if ($year-only-pattern) then 
                                                        let $year := substring(@when, 1, 4)
                                                        return $year
                                                    else ()" />
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'right'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration: underline dotted;
                    </outputRendition>
                </model>
                <model output="web" predicate="@from and @to" behaviour="inline">
                    <desc>Mouseover for case of attributes @from and @to.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="concat(@from, ' bis ', @to)"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'right'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration: underline dotted;
                    </outputRendition>
                </model>
                <model output="web" predicate="@from and not(@to)" behaviour="inline">
                    <desc>Mouseover for case of attributes @from without specific ending.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="concat('Von ', @from, ' an.')"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'right'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                    text-decoration: underline dotted;
                    </outputRendition>
                </model>
                <model behaviour="inline">
                    <desc>Default.</desc>
                    <outputRendition xml:space="preserve">
                    null
                    </outputRendition>
                </model>
            </elementSpec>
            <elementSpec ident="persName" mode="add">
                <!-- For annotation tool only -->
                <model behaviour="inline" predicate="@ref">
                    <desc>For annotation tool only: Show names as mouseover.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="uri" value="concat('https://fpb.saw-leipzig.de/person/person/', replace(@ref, 'fpb-', ''))"/>
                    <param name="target" value="'_blank'"/>
                    <param name="alternate" value="concat(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(), ' (*', id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//birth/date/@when, ', ✝', id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//death/date/@when, ')')"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'right'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate"><a href="[[uri]]" target="[[target]]">[[alternate]]</a></span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                        text-decoration: underline dotted;
                    </outputRendition>
                </model>
                <model behaviour="inline">
                    <desc>Default.</desc>
                </model>
            </elementSpec>
            <elementSpec ident="placeName" mode="add">
                <model behaviour="inline" predicate="@ref">
                    <desc>For annotation tool only: Show place names as mouseover.</desc>
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="uri" value="concat('https://fpb.saw-leipzig.de/places/place/', replace(@ref, 'fpb-', ''))"/>
                    <param name="target" value="'_blank'"/>
                    <param name="alternate" value="concat(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/placeName/text(), ' (N', substring-before(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//location/geo/text(), ' '),' E', substring-after(id(@ref, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//location/geo/text(), ' '), ')')"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'right'"/>
                    <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate"><a href="[[uri]]" target="[[target]]">[[alternate]]</a></span></pb-popover></pb:template>
                    <outputRendition xml:space="preserve">
                        text-decoration: underline dotted;
                    </outputRendition>
                </model>
                <model behaviour="inline">
                    <desc>Default.</desc>
                </model>
                </elementSpec>
                <elementSpec ident="rs" mode="add">
                    <model behaviour="inline">
                        <desc>For annotation tool only: Show referred strings as mouseover.</desc>
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="."/>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <param name="alternate" value="if(@type='person' and starts-with(@key, 'fpb-')) then concat(id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text(), ' (*', id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//birth/date/@when, ', ✝', id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//death/date/@when, ')') else if(@type='place' and starts-with(@key, 'fpb-')) then concat(id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/placeName/text(), ' (N', substring-before(id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//location/geo/text(), ' '),' E', substring-after(id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))//location/geo/text(), ' '), ')') else if(@type='organization' and starts-with(@key, 'fpb-')) then id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/orgName/text() else ./@key"/>
                        <param name="placement" value="'right'"/>
                        <param name="fallback-placement" value="'left'"/>
                        <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                            text-decoration: underline dotted;
                        </outputRendition>
                    </model>
                </elementSpec>
                    <elementSpec ident="app" mode="change">                    
                    <model behaviour="inline" predicate="rdg[1] and rdg[2]">
                    <desc>Tag for alternative text versions.</desc>
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="rdg[1]"/>
                        <param name="alternate" value="concat('Alternative Lesart: ', rdg[2])"/>
                        <param name="placement" value="'right'"/>
                        <param name="fallback-placement" value="'left'"/>
                        <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                            text-decoration: underline dotted;
                        </outputRendition>
                    </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="@type='unedited'" behaviour="inline">
                        <desc>If there is unedited text, show only [...] with grey background and the note text as mouseover (normally "unedited text" or similar).</desc>
                        <param name="name" value="'pb-popover'"/>
                        <param name="content" value="'[...]'"/>
                        <param name="alternate" value="."/>
                        <param name="placement" value="'top'"/>
                        <param name="fallback-placement" value="'bottom'"/>
                        <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                        <outputRendition xml:space="preserve">
                        text-decoration: underline dotted;
                        background-color: #e6e6e6;
                        </outputRendition>
                    </model>
                    <model predicate="@place='margin-left'" behaviour="inline">
                        <desc>If note is type='marginalia' and placed 'margin-left' show note on the left and give some space.</desc>
                        <param name="content" value="for $anchor in ..//anchor/@xml:id return root($parameters?root)//div//note[@type='marginalia'][@target=$anchor]/node()"/>
                        <outputRendition xml:space="preserve">
                            display: block;
                            float: right;
                            margin-right: -15%;
                            width: 5em;
                            margin-bottom: 0;
                            margin-top: 0;
                            clear: right;
                            overflow: visible;
                            font-size: 70%;
                            text-align: right;
                            text-indent: 0%;
                        </outputRendition>
                    </model>
                    <model predicate="@place='margin-right'" behaviour="inline">
                        <desc>If note is type='marginalia' and placed 'margin-left' show note on the left and give some space.</desc>
                        <param name="content" value="for $anchor in ..//anchor/@xml:id return root($parameters?root)//div//note[@type='marginalia'][@target=$anchor]/node()"/>
                        <outputRendition xml:space="preserve">
                            display: block;
                            float: left;
                            margin-left: -15%;
                            width: 5em;
                            margin-bottom: 0;
                            margin-top: 0;
                            clear: left;
                            overflow: visible;
                            font-size: 70%;
                            text-align: left;
                            text-indent: 0%;
                        </outputRendition>
                    </model>
                    <model predicate="@type='commented' and child::anchor" behaviour="inline">
                            <desc>If note is a commentary, get commentary and show it in mouseover.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="for $anchor in child::anchor/@n return root($parameters?root)//div//note[@type='note'][@n=$anchor]/node()"/>
                            <param name="placement" value="'bottom'"/>
                            <param name="fallback-placement" value="'left'"/>
                            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                    text-decoration: underline dotted;
                                </outputRendition>
                            </model>
                            <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                            <model predicate="@type='presentation'" behaviour="inline">
                            <desc>If there is a presentation note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Präsentationsvermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Präsentationsvermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(@subtype='person' and starts-with(@hand, 'fpb-')) then concat('Präsentationsvermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Präsentationsvermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                        <model predicate="@type='received'" behaviour="inline">
                            <desc>If there is a receipt note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Empfangsvermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Empfangsvermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(@subtype='person' and starts-with(@hand, 'fpb-')) then concat('Empfangsvermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Empfangsvermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <model predicate="@type='possessor'" behaviour="inline">
                            <desc>If there is a ownership note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Besitzvermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Besitzvermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(@subtype='person' and starts-with(@hand, 'fpb-')) then concat('Besitzvermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Besitzvermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <model predicate="@type='address'" behaviour="inline">
                            <desc>If there is an address note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Adressvermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Adressvermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Adressvermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Adressvermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <model predicate="@type='numbering'" behaviour="inline">
                            <desc>If there is a numbering note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Numerierungsvermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Numerierungsvermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Numerierungsvermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Numerierungsvermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <model predicate="@type='postalNote'" behaviour="inline">
                            <desc>If there is a postal note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Postvermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Postvermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Postvermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Postvermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                        <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                        <model predicate="@type='other'" behaviour="inline">
                            <desc>If there is an unspecified note, show in mouseover, which kind of note, and who left it.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <param name="alternate" value="if(contains(@hand, 'main')) then concat('Sonstiger Vermerk, ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else if(contains(@hand, 'involved')) then concat('Sonstiger Vermerk, ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else if(starts-with(@hand, 'fpb-')) then concat('Sonstiger Vermerk, ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else concat('Sonstiger Vermerk, ergänzt von: ', ./@hand)"/>
                            <param name="placement" value="'left'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                                color: grey;
                                text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                            <model predicate="parent::person" behaviour="omit">
                                <desc>If note is a part of person in register, omit.</desc>
                            </model>
                            <model predicate="parent::num" behaviour="omit">
                                <desc>Not in use. If there is a number, the child::note will be omitted here, because it is taken care of at ident="num".</desc>
                            </model>
                            <model predicate="parent::span" behaviour="omit">
                                <desc>Not in use. If there is a span with child::note, omit.</desc>
                            </model>
                            <model predicate="$parameters?view='notes' and not(parent::unclear)" behaviour="listItem">
                                <desc>If there is a note that does not have a parent::unclear, show it in view='notes' as list item.</desc>
                                <param name="n" value="@n"/>
                            </model>
                            <model predicate="$parameters?view='notes' and not(parent::unclear)" behaviour="listItem">
                                <desc>If there is a note that does not have a parent::unclear, show it in view='notes' as list item.</desc>
                                <param name="n" value="@n"/>
                            </model>
<!--                    <model predicate="not(parent::unclear) and not(@type='presentation') and not(@type='received') and not(@type='address')" behaviour="note">-->
<!--                    <desc>Treat everything else as footnote</desc>-->
<!--            <param name="place" value="'footnote'"/>-->
<!--            <outputRendition xml:space="preserve">-->
<!--                font-size: 75%;-->
<!--                background-color: #C0C0C0;-->
<!--                padding: 0 .25em;-->
<!--                border-right: 1px solid black;-->
<!--                text-indent: 0;-->
<!--                margin: 0 .25em;-->
<!--            </outputRendition>-->
<!--        </model>-->
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model output="latex" behaviour="block">
                        <desc>Heading behaiour in latex output.</desc>
                        <param name="content" value=".//fileDesc//sourceDesc"/>
                    </model>
                <modelSequence output="fo">
                    <model behaviour="heading">
                        <desc>Heading behaiour in FO output.</desc>
                        <param name="content" value="fileDesc/titleStmt/title"/>
                        <param name="level" value="1"/>
                    </model>
                    <model behaviour="heading">
                        <param name="content" value="'Metadata'"/>
                        <param name="level" value="2"/>
                    </model>
                    <model behaviour="block">
                        <param name="content" value=".//sourceDesc//msDesc"/>
                    </model>
                </modelSequence>
                <model predicate="$parameters?view='metadata'" behaviour="block" cssClass="metadata">
                    <desc>Heading for metadata output in view='metadata'.</desc>
                    <param name="content" value=".//fileDesc//sourceDesc | .//fileDesc//publicationStmt |.//profileDesc//correspDesc"/>
                    <outputRendition xml:space="preserve">
                    font-size: .75em;
                    </outputRendition>
                </model>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block">
                        <desc>Edition view: Show short header.</desc>
                    </model>
                    <model output="fo" behaviour="omit">
                        <desc>Omit FO output here.</desc>
                    </model>
                    <model predicate="$parameters?header='letter'" behaviour="inline">
                        <desc>Edition view: Show title as header.</desc>
                        <param name="content" value="./fileDesc/titleStmt/title"/>
                        <param name="level" value="5"/>
                    </model>
                </elementSpec>
                <elementSpec ident="orig" mode="change">
                    <model predicate="@rend='indent'" behaviour="inline">
                        <desc>Original indentation.</desc>
                        <param name="content" value="concat('     ', .)"/>
                        <outputRendition xml:space="preserve" scope="before">
                            content: '    ';
                            white-space: pre;
                        </outputRendition>
                    </model>
                    <model predicate="@type='keepLB' and $parameters?mode='normalized'" behaviour="break">
                         <desc>Original line breaks should be kept.</desc>
                        <param name="type" value="'line'"/>
                    </model>
                    <model behaviour="inline" useSourceRendition="true">
                        <desc>Default.</desc>
                    </model>
                </elementSpec>
                <elementSpec ident="anchor" mode="change">
                    <modelSequence>
                        <model predicate="contains(@xml:id, 'm') and following::note[@place='margin-left']" behaviour="inline">
                            <desc>Place marginalia to the left of the text, if margin-left note.</desc>
                            <param name="content" value="for $anchor in ./@xml:id return root($parameters?root)//div//note[@type='marginalia'][@place='margin-left'][@target=$anchor]/node()"/>
                            <outputRendition xml:space="preserve">
                                display: block;
                                float: left;
                                margin-left: -15%;
                                width: 5em;
                                margin-bottom: 0;
                                margin-top: 0;
                                clear: right;
                                overflow: visible;
                                font-size: 70%;
                                text-align: left;
                                text-indent: 0%;
                            </outputRendition>
                        </model>   
                        <model predicate="contains(@xml:id, 'm') and following::note[@place='margin-right']" behaviour="inline">
                            <desc>Place marginalia to the right of the text, if margin-right note.</desc>
                            <param name="content" value="for $anchor in ./@xml:id return root($parameters?root)//div//note[@type='marginalia'][@place='margin-right'][@target=$anchor]/node()"/>
                            <outputRendition xml:space="preserve">
                                display: block;
                                float: right;
                                margin-right: -15%;
                                width: 5em;
                                margin-bottom: 0;
                                margin-top: 0;
                                clear: left;
                                overflow: visible;
                                font-size: 70%;
                                text-align: right;
                                text-indent: 0%;
                            </outputRendition>
                        </model>
                
                        <!-- add[addition] with Involved Scribe, differ between del tag in add and normal add -->
                        <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='addition']/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='addition'][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id))" behaviour="inline">
                            <desc>Annotation view: add[addition] with Involved Scribe, differ between del tag in add and normal add</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='addition']/node()"/>
                            <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))[@type='addition']/del[1]) then concat('Ergänzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add[@type='addition']/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition'and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' Ursprüngliche Lesart: ', id(concat('t', @xml:id), root($parameters?root))/string()) else concat('Ergänzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add[@type='addition']/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
                            <param name="placement" value="'top'"/>
                            <param name="fallback-placement" value="'bottom'"/>
                            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                            color: grey;
                            </outputRendition>
                        </model>
                <!-- add[addition] with Main Scribe, differ between del tag in add and normal add -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='addition'][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)" behaviour="inline">
                                <desc>Annotation view: add[addition] with Main Scribe, differ between del tag in add and normal add</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='addition']/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))/del[1]) then concat('Ergänzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition'and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' Ursprüngliche Lesart: ', id(concat('t', @xml:id), root($parameters?root))/string()) else concat('Ergänzt von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@type='addition' and @xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                text-decoration: underline dotted;
                                </outputRendition>
                            </model>
                <!-- add[correction] with Involved Scribe  and unclear[unsure] del -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)) and preceding-sibling::del[1]/unclear[@reason='unsure']" behaviour="inline">
                                <desc>Annotation view: add[correction] with Involved Scribe  and unclear[unsure] del</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="preceding-sibling::del[1]/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' zu: ', id(concat('t', @xml:id), root($parameters?root))/string(), ' (unsicher)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                color: grey;
                                </outputRendition>
                            </model>
                <!-- add[correction] with Main Scribe and unclear[unsure] del -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id) and preceding-sibling::del[1]/unclear[@reason='unsure']" behaviour="inline">
                                <desc>Annotation view: add[correction] with Main Scribe and unclear[unsure] del</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='correction']/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' Ursprüngliche Lesart: ', preceding-sibling::del[1], ' (unsicher)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                text-decoration: underline dotted;
                                </outputRendition>
                            </model>
                <!-- add[correction] with Involved Scribe  and unclear[illegible] del -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)) and preceding-sibling::del[1]/unclear[@reason='illegible']" behaviour="inline">
                                <desc>Annotation view: add[correction] with Involved Scribe  and unclear[illegible] del</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="preceding-sibling::del[1]/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' zu: ', id(concat('t', @xml:id), root($parameters?root))/string(), ' (unleserlich)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                color: grey;
                                </outputRendition>
                            </model>
                <!-- add[correction] with Main Scribe and unclear[illegible] del -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id) and preceding-sibling::del[1]/unclear[@reason='illegible']" behaviour="inline">
                                <desc>Annotation view: add[correction] with Main Scribe  and unclear[illegible] del</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='correction']/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' Ursprüngliche Lesart: ', preceding-sibling::del[1], ' (unleserlich)') else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                text-decoration: underline dotted;
                                </outputRendition>
                            </model>
                
                
                <!-- add[correction] with Involved Scribe -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id) and not((concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id)) and not(preceding-sibling::del[1]/unclear[@reason='unsure' or 'illegible'])" behaviour="inline">
                                <desc>Annotation view: add[correction] with Involved Scribe</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="preceding-sibling::del[1]/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else (), ' zu: ', id(concat('t', @xml:id), root($parameters?root))/string()) else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'involved', 'Unbekannter Schreiber ')  else()) else ()    )"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                color: grey;
                                </outputRendition>
                            </model>
                <!-- add[correction] with Main Scribe, differ between del tag in add and normal add -->
                            <model predicate="contains(@xml:id, 'a') and (concat('t', ./@xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]/@xml:id) and not(preceding-sibling::del[1]/unclear[@reason='unsure' or 'illegible'])" behaviour="inline">
                                <desc>Annotation view: add[correction] with Main Scribe, differ between del tag in add and normal add</desc>
                                <param name="name" value="'pb-popover'"/>
                                <param name="content" value="id(concat('t', @xml:id), root($parameters?root))[@type='correction']/node()"/>
                                <param name="alternate" value="if (id(concat('t', @xml:id), root($parameters?root))) then concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else (), ' Ursprüngliche Lesart: ', preceding-sibling::del[1]) else concat('Korrigiert von: ', for $a in . return if(concat('t', $a/@xml:id) = root($parameters?root)//add/@xml:id) then (if(starts-with(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'fpb-')) then root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text() else if(not(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand='')) then replace(root($parameters?root)//add[@xml:id = concat('t', $a/@xml:id)]/@hand, 'main', 'Unbekannter Hauptschreiber ')  else()) else ())"/>
                                <param name="placement" value="'top'"/>
                                <param name="fallback-placement" value="'bottom'"/>
                                <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                                <outputRendition xml:space="preserve">
                                text-decoration: underline dotted;
                                </outputRendition>
                            </model>
                        </modelSequence>
                    </elementSpec>
                    <elementSpec ident="term" mode="add">
                        <model predicate="@type='term'" behaviour="inline">
                            <desc>Not in use. If term then show meaning from glossary in register via mouseover.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="."/>
                            <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                            <param name="alternate" value="if(@type='term') then let $s := id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/def/string() return  concat(id(@key, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/orth/term/string(), ': ', $s) else ()"/>
                            <param name="placement" value="'bottom'"/>
                            <param name="fallback-placement" value="'top'"/>
                            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                            <outputRendition xml:space="preserve">
                            text-decoration: underline dotted;
                            </outputRendition>
                        </model>
                    </elementSpec>
                    <elementSpec ident="gap" mode="change">
                        <model behaviour="inline">
                            <desc>If gap, show [ ] in text and show reason via mouseover.</desc>
                            <param name="name" value="'pb-popover'"/>
                            <param name="content" value="'[ ]'"/>
                            <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                            <param name="alternate" value="concat('Textverlust durch ', @reason)"/>
                            <param name="placement" value="'top'"/>
                            <param name="fallback-placement" value="'bottom'"/>
                            <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                        </model>
                        <model behaviour="inline">
                            <desc>Default.</desc>
                            <outputRendition xml:space="preserve" scope="before">
                                content: '[...]';
                            </outputRendition>
                        </model>
                    </elementSpec>
                    <elementSpec ident="p" mode="change">
                        <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="paragraph">
                            <desc>If there are marginalia right and left, set margin to main text.</desc>
                            <outputRendition xml:space="preserve">
                                margin-left: 15%;
                                margin-right: 15%;
                            </outputRendition>
                        </model>
                        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="paragraph">
                            <desc>If there are marginalia on the right, set margin to main text.</desc>
                            <outputRendition xml:space="preserve">
                                margin-right: 15%;
                            </outputRendition>
                        </model>
                        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="paragraph">
                            <desc>If there are marginalia on the left, set margin to main text.</desc>
                            <outputRendition xml:space="preserve">
                                margin-left: 15%;
                            </outputRendition>
                        </model>
                        <model behaviour="paragraph" useSourceRendition="true">
                            <desc>Default: set paragraph.</desc>
                            <outputRendition xml:space="preserve">
                                text-align: justify;
                            </outputRendition>
                        </model>
                    </elementSpec>
                    <elementSpec ident="lb" mode="change">
                        <model predicate="@n='N001' and (ancestor::div[@rend='textblock'][1] or ancestor::div[@rend='tb cbr-li'][1] or ancestor::div[@rend='tb cbr-lo'][1] or ancestor::div[@rend='tb cbr-ri'][1] or ancestor::div[@rend='tb cbr-ro'][1] or ancestor::div[@rend='tb cbr-ti'][1] or ancestor::div[@rend='tb cbr-to'][1] or ancestor::div[@rend='tb cbr-bi'][1] or ancestor::div[@rend='tb cbr-bo'][1])" behaviour="omit">
                            <desc>If curly-bracket and first row, omit.</desc>
                        </model>
                        <model predicate="parent::div[@rend='container'][1] and not(@n='N001')" behaviour="break">
                            <desc>If curly-bracket and not first row, break.</desc>
                        </model>
                        <model predicate="following-sibling::*[1][self::add[contains(@xml:id, 'ta')]]" behaviour="omit">
                            <desc>Omit, if add Tag, so that the rows with add tags are not shown, even if empty.</desc>
                        </model>
                        <model predicate="$parameters?mode='normalized' and not(ancestor::closer) and not(ancestor::opener) and not(ancestor::address) and not(following-sibling::orig[@type='keepLB'][1]) and not(ancestor::head) and not(ancestor::signed)" behaviour="omit">
                            <desc>Edition normalized view: Omit in normalized view, if no closer, opender, address or intentional line breaks or head or signature.</desc>
                        </model>
                        <modelSequence>
                            <model predicate="not($parameters?mode='normalized')" behaviour="break">
                                <desc>Break line if diplomatic view.</desc>
                                <param name="type" value="'line'"/>
                                <param name="label" value="@n"/>
                            </model>
<!--            <model predicate="not($parameters?mode='normalized') and starts-with(@facs, 'iiif:')" behaviour="webcomponent" cssClass="facs">-->
<!--                 <desc>Insert 'eye' before every line, so while hovering rows on facsimile will be shown.</desc>-->
<!--                <param name="facs" value="replace(replace(@facs, '/[^/]*$', ''), 'iiif:', '')"/>-->
<!--                <param name="content" value="''"/>-->
<!--                <param name="coordinates" value="('[' || replace(@facs, '^.*/', '') || ']')"/>-->
<!--                <param name="emit" value="'transcription'"/>-->
<!--                <param name="name" value="'pb-facs-link'"/>-->
<!--                <outputRendition xml:space="preserve">-->
<!--                -->
<!--                -->
<!--                -->
<!--                                font-size: 12px;-->
<!--                                color: #888888;-->
<!--                                cursor: pointer;-->
<!--                                display: inline;-->
<!--                                display: block;-->
<!--                                margin-right: 30px;-->
<!--                                float: left;-->
<!--                            -->
<!--                -->
<!--                -->
<!--                </outputRendition>-->
<!--            </model>-->
                        </modelSequence>
                    </elementSpec>
                    <elementSpec ident="supplied" mode="change">
                        <model predicate="parent::choice" behaviour="inline">
                            <desc>Default.</desc>
                        </model>
                    </elementSpec>
                    <elementSpec ident="add" mode="change">
                        <model predicate="contains(@xml:id, 'ta')" behaviour="omit">
                            <desc>If the add tag refers to an anchor, omit.</desc>
                        </model>
                        <model predicate="@type='correction' and preceding-sibling::del[1]" behaviour="omit"/>
                        
                    <!-- Involved Scribe -->
                        <model predicate="not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) and @type='addition' and not(contains(@xml:id, 'ta'))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="if(starts-with(@hand, 'fpb-') and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)) then concat('Ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else if(not(@hand='')) then concat('Ergänzt von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) else 'Ergänzung'"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: grey;
            </outputRendition>
        </model>
        
        <!-- Main Scribe -->
                    <model predicate="(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) and @type='addition' and not(contains(@xml:id, 'ta'))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="if(starts-with(@hand, 'fpb-') and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) then concat('Ergänzt von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) else if(not(@hand='')) then concat('Ergänzt von: ', replace(@hand, 'main', 'Unbekannter Hauptschreiber ')) else 'Ergänzung'"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model predicate="@type='addition' and not(contains(@xml:id, 'ta'))" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="concat('Ergänzt von: ', @hand)"/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve"><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="salute" mode="change">
                    <model predicate="parent::closer" behaviour="inline"/>
                    <model behaviour="block"/>
                </elementSpec>
        <elementSpec ident="ref" mode="change">
            <model predicate="@target" behaviour="link">
                <param name="uri" value="@target"/>
                <param name="alternate" value="@target"/>
                <param name="name" value="'pb-popover'"/>
                <pb:template xmlns="" xml:space="preserve"><pb-popover uri="[[uri]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
                <outputRendition xml:space="preserve">
                    color: red;
                </outputRendition>
            </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="front" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="back" mode="change">
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="div" mode="change">
                    <model predicate="@type='commentary' or @type='commentary_front' or @type='commentary_back'" behaviour="omit"/>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <model predicate="$parameters?view='notes'" behaviour="list">
            <param name="content" value="for $anchor in .//anchor/@n return  root($parameters?root)//div[@type='commentary']//note[@n=$anchor]"/>
            <model predicate="$parameters?mode='omitCommentary' and (@type='commentary' or @type='commentary_front' or @type='commentary_back')" behaviour="omit"/>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
            <param name="type" value="'custom'"/>
        </model>
                    <model predicate="parent::body or parent::front or parent::back" behaviour="section"/>
                    <model behaviour="block"/>
                </elementSpec>
                <!-- If the hyphenated words are wrapped with <w> tags, the words are shown normally in normalized view without a gap -->
                 <elementSpec ident="w" mode="change">
                      <model predicate="$parameters?mode='normalized'" behaviour="inline">
                      <param name="content" value="(node() except (lb, span[@type='hyphen']))/normalize-space()[.] => string-join()"/>
                      </model>
                </elementSpec>
                <elementSpec ident="span" mode="add">
                        <model predicate="not($parameters?mode='normalized') and @type='hyphen'" behaviour="inline"/>
<!--                    <model predicate="$parameters?mode='normalized' and @type='hyphen'" behaviour="omit"/>-->
                    <model predicate="child::note" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <!-- CAVEAT: /db/apps/annotations/data/register.xml -->
                    <param name="alternate" value="note/node()"/>
                    <param name="placement" value="'right'"/>
                    <param name="fallback-placement" value="'left'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="pb" mode="change">
                    <model predicate="@type='empty'" behaviour="inline">
            <param name="content" value="concat('&lt;Leerseite ', @n,'&gt;')"/>
            <outputRendition xml:space="preserve">
            display: block; color: grey; text-align: right; font-size: 75%;
            </outputRendition>
        </model>
                    <model output="latex" behaviour="inline">
            <param name="content" value="'[' || @f || ':' || @n || ']'"/>
            <pb:template xmlns="" xml:space="preserve">\marginpar{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <param name="content" value="'[' || @f || ':' || @n || ']'"/>
        </model>
                    <model predicate="not(@type='hidden')" behaviour="webcomponent" useSourceRendition="true">
            <param name="content" value="@n"/>
            <param name="facs" value="let $path := id(substring-after(@facs, '#'), root($parameters?root)) return  $path/surface/graphic/@url"/>
            <param name="name" value="'pb-facs-link'"/>
            <param name="emit" value="'transcription'"/>
            <param name="order" value="@n"/>
            <outputRendition xml:space="preserve">
            display: block; color: grey; text-align: right; font-size: 75%;
            </outputRendition>
            <outputRendition xml:space="preserve" scope="before">
            content: ' |p.';
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content: '| '
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="msDesc" mode="add">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="'Aufbewahrungsort:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="(//msIdentifier//repository)[1]/node()"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Inventarnr.:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//msIdentifier//idno[@type='id']/node()"/>
            </model>
            <model behaviour="heading">
                <param name="content" value="'Inhalt:'"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//msContents//summary//desc/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="publicationStmt" mode="change">
                    <modelSequence>
            <model behaviour="heading">
                <param name="content" value="'Lizenz: '"/>
                <param name="level" value="3"/>
            </model>
            <model behaviour="block">
                <param name="content" value="//publisher/node()"/>
            </model>
            <model behaviour="link" cssClass="link">
                <param name="link" value="//availability//licence/@target"/>
                <param name="target" value="'_blank'"/>
                <param name="content" value="//availability//licence/node()"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="correspDesc" mode="add"/>
                <elementSpec ident="correspAction" mode="add">
                    <modelSequence>
            <model predicate="@type='sent'" behaviour="heading">
                <param name="content" value="'Absender: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='sent'" behaviour="block">
                <param name="content" value="if((count(persName) &gt; 1) and (persName[position() != last()])) then (for $pers in persName/node() return concat($pers,',&amp;#xa;')) else persName/node()"/>
            </model>
            <model predicate="@type='received'" behaviour="heading">
                <param name="content" value="'Empfänger: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='received'" behaviour="block">
                <param name="content" value="if((count(persName) &gt; 1) and (persName[position() != last()])) then (for $pers in persName/node() return concat($pers,',&amp;#xa;')) else persName/node()"/>
            </model>
            <model predicate="@type='sent'" behaviour="heading">
                <param name="content" value="'Abfassungsort und -datum: '"/>
                <param name="level" value="3"/>
            </model>
            <model predicate="@type='sent'" behaviour="block">
                <param name="content" value="concat(placeName/node(), ', ', date/node())"/>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="signed" mode="change">
                    <model predicate="parent::closer" behaviour="inline" />
                </elementSpec>
        <elementSpec ident="del" mode="change">
        <!-- omit if there is an anchor -->
        <model predicate="self::del[following-sibling::anchor[position() &lt; 1][concat('t', @xml:id) = root($parameters?root)//add[@type='correction' and not(@place='inspace')]/@xml:id]]" behaviour="omit"/>
         <!-- Involved Scribe and direct add[correction] and del with child::unclear[@reason='unsure'] -->
        <model predicate="child::unclear[@reason='unsure'] and following-sibling::*[1][self::add and @type='correction' and @place='inspace' and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="self::del/node()"/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $correction := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and not(@hand = $refPers)],
                    $hand := $correction/@hand,
                    $node := $correction/node(),
                    $unclear := child::unclear[@reason='unsure']
                return
                    if ($correction) then
                        if (starts-with($hand, 'fpb-')) then
                            concat(
                                'Korrigiert von: ',
                                $correction/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                                ' zu: ',
                                $node,
                                ', ursprüngliche Lesart [',
                                $unclear,
                                '] unsicher'
                            )
                        else if (not($hand = '')) then
                            concat(
                                'Korrigiert von: ',
                                replace($hand, 'involved', 'Unbekannter Schreiber '),
                                ' zu: ',
                                $node,
                                ', ursprüngliche Lesart [',
                                $unclear,
                                '] unsicher'
                            )
                        else
                            concat(
                                'Korrigiert zu: ',
                                $node,
                                ' Ursprüngliche Lesart [',
                                $unclear,
                                '] unsicher'
                            )
                    else
                        concat(
                            'Korrigiert, ursprüngliche Lesart [',
                            $unclear,
                            '] unsicher'
                        )
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>


        <!-- Main Scribe and direct add[correction] and del with child::unclear[@reason='unsure'] and lb in del-->
        <model predicate="child::unclear[@reason='unsure'] and following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef] and self::del//lb" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers]
                return
                        concat('&#10;', $add/node())
            "/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $correction := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers],
                    $hand := $correction/@hand,
                    $text := $correction/string(),
                    $original := self::del/string(),
                    $unclear := child::unclear[@reason='unsure']
                return
                    if ($correction) then
                        if (starts-with($hand, 'fpb-')) then
                            concat(
                                'Korrigiert von: ',
                                $correction/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                                '; Ursprüngliche Lesart: ',
                                $original,
                                ' ([', $unclear, '] unsicher)'
                            )
                        else if (contains($hand, 'main')) then
                            concat(
                                'Korrigiert von: ',
                                replace($hand, 'main', 'Unbekannter Hauptschreiber '),
                                '; Ursprüngliche Lesart: ',
                                $original,
                                ' ([', $unclear, '] unsicher)'
                            )
                        else
                            concat(
                                'Ursprüngliche Lesart: [',
                                $unclear,
                                '] unsicher'
                            )
                    else ()
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover style="white-space: pre-line;" placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- Main Scribe and direct add[correction] and del with child::unclear[@reason='unsure'] and lb in add-->
        <model predicate="child::unclear[@reason='unsure'] and following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef] and not(self::del//lb)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers]
                return
                        $add/node()
            "/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $correction := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers],
                    $hand := $correction/@hand,
                    $text := $correction/string(),
                    $original := self::del/string(),
                    $unclear := child::unclear[@reason='unsure']
                return
                    if ($correction) then
                        if (starts-with($hand, 'fpb-')) then
                            concat(
                                'Korrigiert von: ',
                                $correction/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                                '; Ursprüngliche Lesart: ',
                                $original,
                                ' ([', $unclear, '] unsicher)'
                            )
                        else if (contains($hand, 'main')) then
                            concat(
                                'Korrigiert von: ',
                                replace($hand, 'main', 'Unbekannter Hauptschreiber '),
                                '; Ursprüngliche Lesart: ',
                                $original,
                                ' ([', $unclear, '] unsicher)'
                            )
                        else
                            concat(
                                'Ursprüngliche Lesart: [',
                                $unclear,
                                '] unsicher'
                            )
                    else ()
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>

        
        <!-- Involved Scribe and direct add[correction] and del with child::unclear -->
        <model predicate="child::unclear[not(@reason='unsure')] 
                       and following-sibling::*[1][self::add and @type='correction' and @place='inspace'] 
                       and not(following-sibling::*[1][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef])" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="'〈…〉'"/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $target := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and not(@hand = $refPers)],
                    $hand := $target/@hand,
                    $name := id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                    $text := string($target)
                return 
                    if ($target) then (
                        if ($hand and starts-with($hand, 'fpb-')) then
                            concat('Korrigiert von: ', $name, ' zu: ', $text, ', ursprüngliche Lesart unleserlich')
                        else if ($hand and not($hand = '')) then
                            concat('Korrigiert von: ', replace($hand, 'involved', 'Unbekannter Schreiber '), ' zu: ', $text, ', ursprüngliche Lesart unleserlich')
                        else
                            concat('Korrigiert zu: ', $text, ', ursprüngliche Lesart unleserlich')
                    )
                    else 'Korrigiert, ursprüngliche Lesart unleserlich'
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                color: grey;
            </outputRendition>
        </model>

        <!-- Main Scribe and direct add[correction] and del with child::unclear and lb in del-->
        <model 
            predicate="child::unclear[not(@reason='unsure')] 
                       and following-sibling::*[1][self::add and @type='correction' and @place='inspace' 
                       and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef] and self::del//lb" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers]
                return 
                        concat('&#10;', $add/node())
            "/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $target := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers],
                    $hand := $target/@hand,
                    $name := id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text()
                return
                    if ($name) then 
                        concat('Korrigiert von: ', $name, '; Ursprüngliche Lesart: unleserlich')
                    else if (contains($hand, 'main')) then 
                        concat('Korrigiert von: ', replace($hand, 'main', 'Unbekannter Hauptschreiber '), '; Ursprüngliche Lesart: unleserlich')
                    else 
                        'Ursprüngliche Lesart: unleserlich'
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover style="white-space: pre-line;" placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- Main Scribe and direct add[correction] and del with child::unclear and lb in add-->
        <model 
            predicate="child::unclear[not(@reason='unsure')] 
                       and following-sibling::*[1][self::add and @type='correction' and @place='inspace' 
                       and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef] and not(self::del//lb)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers]
                return 
                        $add/node()
            "/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $target := following-sibling::*[1][self::add and @type='correction' and @place='inspace' and @hand = $refPers],
                    $hand := $target/@hand,
                    $name := id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text()
                return
                    if ($name) then 
                        concat('Korrigiert von: ', $name, '; Ursprüngliche Lesart: unleserlich')
                    else if (contains($hand, 'main')) then 
                        concat('Korrigiert von: ', replace($hand, 'main', 'Unbekannter Hauptschreiber '), '; Ursprüngliche Lesart: unleserlich')
                    else 
                        'Ursprüngliche Lesart: unleserlich'
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- Involved Scribe and direct add[correction] -->
        <model predicate="self::del[
                following-sibling::*[1][
                    self::add and 
                    @type='correction' and 
                    @place='inspace' and 
                    not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)
                ]
            ]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="
                let $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::add[1][
                        @type='correction' and 
                        @place='inspace' and 
                        not(@hand = $refPers)
                    ],
                    $hand := $add/@hand,
                    $name := $add/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                    $text := $add/string()
                return
                    if ($add) then (
                        if ($hand and starts-with($hand, 'fpb-')) then
                            concat('Korrigiert von: ', $name, ' zu: ', $text)
                        else if ($hand and not($hand = '')) then
                            concat('Korrigiert von: ', replace($hand, 'involved', 'Unbekannter Schreiber '), ' zu: ', $text)
                        else
                            concat('Korrigiert zu: ', $add/text())
                    ) else 
                        'Korrigiert'
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>

        
        <!-- Main Scribe and direct add[correction] with lb in del -->
        <model predicate="self::del[
                following-sibling::*[1][
                    self::add and 
                    @type='correction' and 
                    @place='inspace' and 
                    @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef
                ]
            ] and self::del//lb" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                let 
                    $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::*[1][self::add and @type='correction' and 
                        @place='inspace' and 
                        @hand = $refPers
                    ]
                return
                        concat('&#10;', $add/node())
            "/>
            <param name="alternate" value="
                let 
                    $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::add[1][
                        @type='correction' and 
                        @place='inspace' and 
                        @hand = $refPers
                    ],
                    $hand := $add/@hand,
                    $name := $add/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                    $original := string(.)
                return
                    if ($add) then
                        if ($name) then
                            concat('Korrigiert von: ', $name, '; Ursprüngliche Lesart: ', $original)
                        else if (contains($hand, 'main')) then
                            concat('Korrigiert von: ', replace($hand, 'main', 'Unbekannter Hauptschreiber '), '; Ursprüngliche Lesart:', $original)
                        else
                            concat('Ursprüngliche Lesart: ', $original)
                    else
                        ()
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover style="white-space: pre-line;" placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- Main Scribe and direct add[correction] with lb inside -->
        <model predicate="self::del[
                following-sibling::*[1][
                    self::add and 
                    @type='correction' and 
                    @place='inspace' and 
                    @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef
                ]
            ] and not(self::del//lb)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                let 
                    $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::*[1][self::add and @type='correction' and 
                        @place='inspace' and 
                        @hand = $refPers
                    ]
                return
                        $add/node()
            "/>
            <param name="alternate" value="
                let 
                    $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,
                    $add := following-sibling::add[1][
                        @type='correction' and 
                        @place='inspace' and 
                        @hand = $refPers
                    ],
                    $hand := $add/@hand,
                    $name := $add/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),
                    $original := string(.)
                return
                    if ($add) then
                        if ($name) then
                            concat('Korrigiert von: ', $name, '; Ursprüngliche Lesart: ', $original)
                        
                        else if (contains($hand, 'main')) then
                            concat('Korrigiert von: ', replace($hand, 'main', 'Unbekannter Hauptschreiber '), '; Ursprüngliche Lesart:', $original)
                        else
                            concat('Ursprüngliche Lesart: ', $original)
                    else
                        ()
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>

        <!-- Main Scribe and direct add[correction]  -->
        <model predicate="following-sibling::add[1][@type='correction'][@place='inspace'][@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef]" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="                 let                      $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,                     $add := following-sibling::*[1][self::add and @type='correction' and                          @place='inspace' and                          @hand = $refPers                     ]                 return                         $add/node()             "/>
            <param name="alternate" value="                 let                      $refPers := root($parameters?root)//scriptNote[@scribe='main']/@scribeRef,                     $add := following-sibling::add[1][                         @type='correction' and                          @place='inspace' and                          @hand = $refPers                     ],                     $hand := $add/@hand,                     $name := $add/id($hand, doc('/db/apps/annotations/data/register.xml'))/persName/text(),                     $original := string(.)                 return                     if ($add) then                         if ($name) then                             concat('Korrigiert von: ', $name, '; Ursprüngliche Lesart: ', $original) else if (contains($hand, 'main')) then                          concat('Korrigiert von: ', replace($hand, 'main', 'Unbekannter Hauptschreiber '), '; Ursprüngliche Lesart:', $original)                          else                             concat('Ursprüngliche Lesart: ', $original)                     else                         ()             "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        
        <!-- parent add with anchor -> omit -->
        <model predicate="parent::add[1] and parent::add[1]/following::anchor[1]" behaviour="omit"/>
                    
        <!-- del of Main Scribe without correction and lb within del -->
        <model predicate="not(following-sibling::add[1][@type='correction']) and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef and self::del//lb" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                    '&#10;〈…〉'
            "/>
            <param name="alternate" value="
                if (contains(child::span/text(), '-')) then 
                    concat('Ursprüngliche Lesart: ', replace(., '-', ''))
                else if (child::unclear[1][@reason='illegible']) then 
                    'Ursprüngliche Lesart: unleserlich'
                else if (child::unclear[1][@reason='unsure']) then 
                    concat('Ursprüngliche Lesart: ', ., '(unleserlich)') 
                else 
                    concat('Ursprüngliche Lesart: ', .)
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover style="white-space: pre-line;" placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        
        <!-- del of Main Scribe without correction and no lb within del -->
        <model predicate="not(following-sibling::add[1][@type='correction']) and @hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef and not(self::del//lb)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="
                    '〈…〉'
            "/>
            <param name="alternate" value="
                if (contains(child::span/text(), '-')) then 
                    concat('Ursprüngliche Lesart: ', replace(., '-', ''))
                else if (child::unclear[1][@reason='illegible']) then 
                    'Ursprüngliche Lesart: unleserlich'
                else if (child::unclear[1][@reason='unsure']) then 
                    concat('Ursprüngliche Lesart: ', ., '(unleserlich)') 
                else 
                    concat('Ursprüngliche Lesart: ', .)
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>

        <!-- del of Involved Scribe without correction -->
        <model predicate="not(following-sibling::*[1][self::add and @type='correction']) and not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef)" behaviour="inline">
            <param name="name" value="'pb-popover'"/>
            <param name="content" value="."/>
            <param name="alternate" value="
                if (not(@hand = root($parameters?root)//scriptNote[@scribe='main']/@scribeRef) and starts-with(@hand, 'fpb-')) then 
                    concat('Gestrichen von: ', id(@hand, doc(&#34;/db/apps/annotations/data/register.xml&#34;))/persName/text()) 
                else if (contains(@hand, 'involved')) then 
                    concat('Gestrichen von: ', replace(@hand, 'involved', 'Unbekannter Schreiber ')) 
                else 
                    'Gestrichen von: unbekannt'
            "/>
            <param name="placement" value="'top'"/>
            <param name="fallback-placement" value="'bottom'"/>
            <pb:template xmlns="" xml:space="preserve">
                <pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">
                    [[content]]
                    <span slot="alternate">[[alternate]]</span>
                </pb-popover>
            </pb:template>
            <outputRendition xml:space="preserve">
                text-decoration: underline dotted;
            </outputRendition>
        </model>
        <model predicate="following::*[1][self::anchor[position() = 1]]" behaviour="omit"/>

<!--                    <model behaviour="inline">-->
<!--            <outputRendition xml:space="preserve">-->
<!--            text-decoration: line-through;-->
<!--            </outputRendition>-->
<!--        </model>-->
    </elementSpec>
                <elementSpec ident="birth" mode="add">
                    <model predicate="@when" behaviour="inline">
            <param name="content" value="if(following-sibling::death[1])then concat('(*', substring(@when, 0, 5), ', ') else concat('(*', substring(@when, 0, 5), ')')"/>
            <outputRendition xml:space="preserve">
            font-size: 80%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="occupation" mode="add">
                    <model predicate="parent::person" behaviour="omit"/>
                </elementSpec>
                <elementSpec ident="death" mode="add">
                    <model predicate="@when" behaviour="inline">
            <param name="content" value="if(preceding-sibling::birth[1])then concat('✝', substring(@when, 0, 5), ')') else concat('(✝', substring(@when, 0, 5), ')')"/>
            <outputRendition xml:space="preserve">
            font-size: 80%;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="closer" mode="change">
                    <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="preceding::note[@place='margin-right'] and preceding::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="preceding::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="preceding::note[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="floatingText" mode="change">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">
            
                margin-left: 10em;
                margin-right: 10em;
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="facsimile" mode="add"/>
                <elementSpec ident="surface" mode="add">
                    <model output="print" behaviour="omit"/>
                </elementSpec>
            <elementSpec ident="opener" mode="change">
                <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="address" mode="add">
                    <model predicate="not(ancestor::closer) and following::note[@place='margin-right'] and following::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="not(ancestor::closer) and following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="not(ancestor::closer) and following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="unclear" mode="change">
                    <model predicate="not(@reason='illegible')" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="if (child::note[@type='commentary']) then replace(., child::note/text(), '') else ."/>
                    <param name="alternate" value="if (child::note[@type='commentary']) then note/text() else 'Lesart unsicher.'"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted;
            </outputRendition>
        </model>
                    <model predicate="@reason='illegible'" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="' 〈…〉 '"/>
                    <param name="alternate" value="if (child::note[@type='commentary']) then note/text() else 'Unleserlich.'"/>
                    <param name="placement" value="'bottom'"/>
                    <param name="fallback-placement" value="'top'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="emph" mode="change">
                    <model behaviour="inline" cssClass="annotation annotation-emphasize">
            <outputRendition xml:space="preserve">
            letter-spacing: 3px;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="head" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="inline">
            <param name="content" value="replace(string-join(.//text()[not(parent::ref)]), '^(.*?)[^\w]*$', '$1')"/>
        </model>
                    <model predicate="parent::figure" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::table" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model predicate="parent::div" behaviour="heading">
            <param name="level" value="count(ancestor::div)"/>
        </model>
                    <model predicate="following::note[@place='margin-right'] and following::note[@place='margin-left']" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
                margin-left: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
       <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="block">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                    <model behaviour="block"/>
                </elementSpec>
            <elementSpec ident="num" mode="add">
                    <model predicate="child::note" behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="."/>
                    <param name="alternate" value="note/node()"/>
                    <param name="placement" value="'right'"/>
                    <param name="fallback-placement" value="'left'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            text-decoration: underline dotted; display: flex;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="metamark" mode="add">
                    <model behaviour="inline">
                    <param name="name" value="'pb-popover'"/>
                    <param name="content" value="'......'"/>
                    <param name="alternate" value="'Fehlstelle'"/>
                    <param name="placement" value="'top'"/>
                    <param name="fallback-placement" value="'bottom'"/>
                    <pb:template xml:space="preserve" xmlns=""><pb-popover placement="[[placement]]" fallback-placement="[[fallback-placement]]">[[content]]<span slot="alternate">[[alternate]]</span></pb-popover></pb:template>
            <outputRendition xml:space="preserve">
            color: transparent;
            </outputRendition>
            <outputRendition xml:space="preserve">
                text-decoration:underline dotted;
                text-decoration-color: black;
           </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="gloss" mode="add">
                    <model predicate="@type='margin-right'" behaviour="inline">
            <outputRendition xml:space="preserve">
                display: block;
                float: right;
                margin-right: -15%;
                width: 5em;
                margin-bottom: 0;
                margin-top: 0;
                clear: right;
                overflow: visible;
                font-size: 70%;
                text-align: right;
                text-indent: 0%;
            </outputRendition>
        </model>
        <model predicate="@type='margin-left'" behaviour="inline">
            <outputRendition xml:space="preserve">
                display: block;
                float: left;
                margin-left: -20%;
                width: 5em;
                margin-bottom: 0;
                margin-top: 0;
                clear: left;
                overflow: visible;
                font-size: 70%;
                text-align: left;
                text-indent: 0%;
            </outputRendition>
        </model>
                </elementSpec>
            <elementSpec ident="ab" mode="change">
            <model predicate="@type='hidden'" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="'Non-edited text / Nicht edierter Text'"/>
            <outputRendition xml:space="preserve">
            
            text-decoration: underline dotted;
            color: transparent;
            
            </outputRendition>
        </model>
         <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-right: 15%;
            </outputRendition>
        </model>
        <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="paragraph">
            <outputRendition xml:space="preserve">
                margin-left: 15%;
            </outputRendition>
        </model>
                <model behaviour="inline"/>
            </elementSpec>
            <elementSpec ident="table" mode="change">
                <model predicate="following::note[@place='margin-left'] and following::note[@place='margin-right']" behaviour="table">
                    <outputRendition xml:space="preserve">
                        font-size: smaller;
                        margin-left: 15%;
                        margin-right: 15%;
                    </outputRendition>
                </model>
                <model predicate="following::note[@place='margin-right'] and not(following::note[@place='margin-left'])" behaviour="table">
                    <outputRendition xml:space="preserve">
                        margin-right: 15%;
                        font-size: smaller;
                    </outputRendition>
                </model>
                <model predicate="following::note[@place='margin-left'] and not(following::note[@place='margin-right'])" behaviour="table">
                    <outputRendition xml:space="preserve">
                        margin-left: 15%;
                        font-size: smaller;
                    </outputRendition>
                </model>
                <model behaviour="table">
                    <outputRendition xml:space="preserve">
                    font-size: smaller;
                    </outputRendition>
                </model>
            </elementSpec>
            <elementSpec ident="cell" mode="change">
                <model predicate="@role='subheading'" behaviour="cell">
                    <outputRendition xml:space="preserve">
                        font-style: italic;
                        text-align: center;
                    </outputRendition>
                </model>
                <model predicate="@role='heading'" behaviour="cell">
                    <outputRendition xml:space="preserve">
                        font-weight: bold;
                        text-align: center;
                    </outputRendition>
                </model>
                <model predicate="@role='unedited'" behaviour="cell">
                    <outputRendition xml:space="preserve">
                        background-color: #e6e6e6;
                        text-align: center;
                    </outputRendition>
                </model>
                <model behaviour="cell"/>
            </elementSpec>
            <elementSpec ident="title" mode="change">
                <model behaviour="paragraph">
                    <outputRendition xml:space="preserve">
                        font-weight: bold;
                    </outputRendition>
                </model>
            </elementSpec>
            </schemaSpec>
        </body>
    </text>
</tei:TEI>